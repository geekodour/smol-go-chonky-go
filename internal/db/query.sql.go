// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: query.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const addCat = `-- name: AddCat :one
INSERT INTO cats (
  name, age, description
) VALUES (
  $1, $2, $3
)
RETURNING cat_id, name, age, description
`

type AddCatParams struct {
	Name        string      `json:"name"`
	Age         int32       `json:"age"`
	Description pgtype.Text `json:"description"`
}

func (q *Queries) AddCat(ctx context.Context, arg AddCatParams) (Cat, error) {
	row := q.db.QueryRow(ctx, addCat, arg.Name, arg.Age, arg.Description)
	var i Cat
	err := row.Scan(
		&i.CatID,
		&i.Name,
		&i.Age,
		&i.Description,
	)
	return i, err
}

const deleteCat = `-- name: DeleteCat :exec
DELETE FROM cats
WHERE cat_id = $1
`

func (q *Queries) DeleteCat(ctx context.Context, catID int32) error {
	_, err := q.db.Exec(ctx, deleteCat, catID)
	return err
}

const getCat = `-- name: GetCat :one
SELECT cat_id, name, age, description FROM cats
WHERE cat_id = $1 LIMIT 1
`

func (q *Queries) GetCat(ctx context.Context, catID int32) (Cat, error) {
	row := q.db.QueryRow(ctx, getCat, catID)
	var i Cat
	err := row.Scan(
		&i.CatID,
		&i.Name,
		&i.Age,
		&i.Description,
	)
	return i, err
}

const listCats = `-- name: ListCats :many
SELECT cat_id, name, age, description FROM cats
ORDER BY name
`

func (q *Queries) ListCats(ctx context.Context) ([]Cat, error) {
	rows, err := q.db.Query(ctx, listCats)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Cat
	for rows.Next() {
		var i Cat
		if err := rows.Scan(
			&i.CatID,
			&i.Name,
			&i.Age,
			&i.Description,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateCat = `-- name: UpdateCat :exec
UPDATE cats
  set name = $2,
  age = $3,
  description = $4
WHERE cat_id = $1
`

type UpdateCatParams struct {
	CatID       int32       `json:"cat_id"`
	Name        string      `json:"name"`
	Age         int32       `json:"age"`
	Description pgtype.Text `json:"description"`
}

func (q *Queries) UpdateCat(ctx context.Context, arg UpdateCatParams) error {
	_, err := q.db.Exec(ctx, updateCat,
		arg.CatID,
		arg.Name,
		arg.Age,
		arg.Description,
	)
	return err
}
